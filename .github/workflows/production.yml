name: Production Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Install dependencies
      run: go mod download
        
    - name: Run all tests
      run: |
        go test -v ./...
        make integration-test
        make load-test

  security-audit:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...
        
    - name: Run dependency vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        severity: 'CRITICAL,HIGH'

    - name: OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.9.0
      with:
        target: ${{ secrets.STAGING_URL }}

  deploy-production:
    needs: [test, security-audit]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.example.com
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml push
    
    - name: Update ECS services
      run: |
        aws ecs update-service --cluster production-cluster --service api-gateway --force-new-deployment
        aws ecs update-service --cluster production-cluster --service auth-service --force-new-deployment
        aws ecs update-service --cluster production-cluster --service user-service --force-new-deployment
        aws ecs update-service --cluster production-cluster --service post-service --force-new-deployment
        aws ecs update-service --cluster production-cluster --service media-service --force-new-deployment

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        generate_release_notes: true

  notify:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}